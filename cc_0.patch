 modules/bbb_node/bbb_node.libraries.yml            |  12 ++
 modules/bbb_node/bbb_node.module                   |  96 ++++++++++--
 modules/bbb_node/bbb_node.routing.yml              |  36 +++--
 modules/bbb_node/css/details.css                   |  23 +++
 modules/bbb_node/js/check_status.bbb.js            |   8 +-
 modules/bbb_node/js/reload_node.js                 |   9 ++
 .../src/Access/BBBMeetingAttendeeAccessCheck.php   |   2 +-
 .../src/Controller/BBBMeetingTypeController.php    | 113 ++++++++++----
 .../bbb_node/src/Plugin/Block/BBBLoginMeeting.php  |  39 ++++-
 .../bbb_node/src/Plugin/Block/BBBRecordMeeting.php | 168 +++++++++++++++++++++
 modules/bbb_node/src/Service/NodeMeeting.php       |   2 +-
 .../templates/bbb-meeting-record.html.twig         |   9 +-
 .../templates/bbb-meeting-status.html.twig         |  13 +-
 modules/bbb_node/templates/bbb-meeting.html.twig   |   7 +-
 .../html--node--meeting--closed.html.twig          |  54 +++++++
 .../bbb_node/templates/item-list--rec.html.twig    |  42 ++++++
 .../page--node--meeting--closed.html.twig          |  56 +++++++
 src/Service/Api.php                                |  12 +-
 src/Service/Meeting.php                            |  34 +++--
 19 files changed, 638 insertions(+), 97 deletions(-)

diff --git a/modules/bbb_node/bbb_node.libraries.yml b/modules/bbb_node/bbb_node.libraries.yml
index 8d07bcb..d008ffd 100644
--- a/modules/bbb_node/bbb_node.libraries.yml
+++ b/modules/bbb_node/bbb_node.libraries.yml
@@ -4,3 +4,15 @@ check_status:
     js/check_status.bbb.js: {}
   dependencies:
     - core/jquery
+
+reload_node:
+  version: VERSION
+  js:
+    js/reload_node.js: {}
+  dependencies:
+    - core/jquery
+
+details:
+  css:
+    theme:
+      css/details.css: {}
diff --git a/modules/bbb_node/bbb_node.module b/modules/bbb_node/bbb_node.module
index 6217b0b..775aab3 100644
--- a/modules/bbb_node/bbb_node.module
+++ b/modules/bbb_node/bbb_node.module
@@ -16,6 +16,7 @@
  */
 
 // API version
+use Drupal\bbb_node\Service\NodeMeeting;
 use BigBlueButton\Parameters\CreateMeetingParameters;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -24,6 +25,8 @@ use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
+use Drupal\node\Entity\Node;
+use Drupal\user\Entity\User;
 use Drupal\node\NodeInterface;
 
 /**
@@ -146,8 +149,8 @@ function bbb_node_form_node_form_alter(&$form, FormStateInterface $form_state, $
   if ($node_meeting->isTypeOf($node)) {
     $meeting = $node_meeting->get($node);
     /** @var \BigBlueButton\Parameters\CreateMeetingParameters $meeting_info */
-    $meeting_info = !empty($meeting['info']) ? $meeting['info'] : $node_meeting->init($node);;
-
+    $meeting_info = !empty($meeting['created']) ? $meeting['created'] : $node_meeting->init($node);
+    $display_mode = \Drupal::config('bbb_node.settings')->get('display_mode');
     $form['bbb'] = [];
     $record = [
       '#title' => t('Record meeting'),
@@ -191,9 +194,10 @@ function bbb_node_form_node_form_alter(&$form, FormStateInterface $form_state, $
       $form['bbb']['logoutURL'] = [
         '#title' => t('Logout URL'),
         '#type' => 'textfield',
-        '#default_value' => $meeting_info->getLogoutUrl(),
+        '#default_value' => $display_mode ==='blank' ? $meeting_info->getLogoutUrl() : 'Redirect to the node',
         '#maxlength' => 255,
         '#description' => t('The URL that the Big Blue Button client will go to after users click the OK button on the <em>You have been logged out message</em>.'),
+        '#attributes' =>  $display_mode ==='blank' ? [] : ['readonly' => 'readonly']
       ];
       $form['bbb']['record'] = $record;
     }
@@ -214,6 +218,27 @@ function bbb_node_form_node_form_alter(&$form, FormStateInterface $form_state, $
       '#weight' => 100,
     ];
   }
+  $form['#submit'][] = '_bbb_node_submit';
+  $form['actions']['submit']['#submit'][] = '_bbb_node_submit';
+}
+
+function _bbb_node_submit(array $form, FormStateInterface $form_state) {
+  $node = $form_state->getFormObject()->getEntity();
+  $params = new CreateMeetingParameters($node->uuid(), $node->getTitle());
+  $meeting = \Drupal::service('bbb_node.meeting');
+  $data = $meeting->get($node);
+  $params->setWelcomeMessage($form['bbb']['welcome']['#value']);
+  $params->setDialNumber($form['bbb']['dialNumber']['#value']);
+  $params->setModeratorPassword($form['bbb']['moderatorPW']['#value']);
+  $params->setAttendeePassword($form['bbb']['attendeePW']['#value']);
+  $display_mode = \Drupal::config('bbb_node.settings')->get('display_mode');
+  $params->setLogoutURL($display_mode =='blank' ? $form['bbb']['logoutURL']['#value']: Url::fromRoute('bbb_node.meeting.closed', ['node' => $node->id()], ['absolute' => 'true'])
+    ->toString());
+  $params->setRecord($form['bbb']['record']['#value']);
+  if ($data = $meeting->create($node, $params)) {
+    // Update local data.
+    $meeting->update($node, $params);
+  }
 }
 
 /**
@@ -228,7 +253,7 @@ function bbb_node_node_insert(EntityInterface $node) {
     $params = new CreateMeetingParameters($node->uuid(), $node->getTitle());
     \Drupal::moduleHandler()->alter('bbb_node_create', $params, $node);
     $meeting = $node_meeting->create($node, $params);
-    $node_meeting->store($node, $meeting);
+    $node_meeting->store($node, $params);
   }
 }
 
@@ -263,12 +288,12 @@ function bbb_node_node_view(array &$build, EntityInterface $node, EntityViewDisp
   if ($BBBNodeTypeConfig->get('showStatus')) {
     $build['content']['bbb_meeting_status'] = [
       '#theme' => 'bbb_meeting_status',
-      '#meeting' => $meeting,
+      '#meeting' => _bbb_node_get_links($node),
       '#weight' => 10,
     ];
     $build['content']['bbb_meeting_record'] = [
-      '#theme' => 'bbb_meeting_record',
-      '#meeting' => $meeting,
+      '#theme' => 'bbb_meeting_status',
+      '#meeting' => _bbb_node_get_links($node, true),
       '#weight' => 11,
     ];
   }
@@ -286,16 +311,14 @@ function bbb_node_node_view(array &$build, EntityInterface $node, EntityViewDisp
       ];
     }
     if ((\Drupal::currentUser()->hasPermission('bbb_node moderate meetings') || $current_user->hasPermission('administer big blue button')) ||
-      $current_user->id() == $node->getAuthor()
-        ->id() && $current_user->hasPermission('bbb_node moderate own meetings')) {
+      $current_user->id() == $node->getOwnerId() && $current_user->hasPermission('bbb_node moderate own meetings')) {
       $links['meeting_moderate'] = [
         'title' => t('Moderate meeting'),
         'href' => Url::fromRoute('bbb_node.meeting.moderate', ['node' => $node->id()])->toString(),
       ];
     }
     if (($current_user->hasPermission('bbb_node moderate meetings') || $current_user->hasPermission('administer big blue button')) ||
-      $current_user->id() == $node->getAuthor()
-        ->id() && $current_user->hasPermission('bbb_node moderate own meetings') &&
+      $current_user->id() == $node->getOwnerId() && $current_user->hasPermission('bbb_node moderate own meetings') &&
       $meeting['info']->isRunning()) {
       $links['meeting_end'] = [
         'title' => t('Terminate meeting'),
@@ -345,10 +368,10 @@ function bbb_node_theme($existing, $type, $theme, $path) {
       'variables' => ['meeting' => NULL, 'mode' => NULL, 'params' => []],
     ],
     'bbb_meeting_status' => [
-      'variables' => ['meeting' => NULL],
+      'variables' => ['meeting' => NULL, 'status' => NULL],
     ],
     'bbb_meeting_record' => [
-      'variables' => ['meeting' => NULL],
+      'variables' => ['records' => NULL],
     ],
     'bbb_meeting_join_moderator' => [
       'variables' => ['meeting' => NULL],
@@ -359,6 +382,15 @@ function bbb_node_theme($existing, $type, $theme, $path) {
     'bbb_block_meeting' => [
       'variables' => ['meeting' => NULL],
     ],
+    'item_list__rec' => [
+      'base hook' => 'item_list',
+    ],
+    'page__node__meeting__closed' => [
+      'base hook' => 'page',
+    ],
+    'html__node__meeting__closed' => [
+      'base hook' => 'html',
+    ]
   ];
 }
 
@@ -385,10 +417,10 @@ function theme_bbb_meeting_status($meeting) {
 /**
  * Theme meeting recording
  */
-function theme_bbb_meeting_record($meeting) {
+function theme_bbb_meeting_record($records) {
   /** @var \Drupal\bbb\Service\Theme $theme */
   $theme = \Drupal::service('bbb.theme');
-  return $theme->meetingRecord($meeting);
+  return $theme->meetingRecord($records);
 }
 
 /**
@@ -399,3 +431,37 @@ function theme_bbb_block_meeting($meeting) {
   $theme = \Drupal::service('bbb.theme');
   return $theme->blockMeeting($meeting);
 }
+
+function _bbb_node_get_links($node, $record = NULL){
+    $user = User::load(Drupal::currentUser()->id());
+    $links = [
+      '#theme' => 'item_list',
+      '#list_type' => 'ul',
+      '#items' => [],
+      '#attributes' => ['class' => 'bbb_status'],
+      '#wrapper_attributes' => ['class' => 'container'],
+      '#cache' => ['max-age' => 0,],
+    ];
+    $display_mode = \Drupal::config('bbb_node.settings')->get('display_mode');
+    foreach (['attend' => 'Attend','moderate' => 'Moderate'] as $mode => $label) {
+      if (!$user->hasPermission("bbb_node $mode meetings")) {
+        continue;
+      }
+      if ($record) {
+        $url = Url::fromRoute("bbb_node.meeting.$mode", array('node' => $node->id(),'record' =>'record'));
+      }
+      else {
+        $url = Url::fromRoute("bbb_node.meeting.$mode", array('node' => $node->id(),'record' => 'norecord'));
+      }
+      $link = [
+        '#type' => 'link',
+        '#url' => $url,
+        '#title' => t($label . ' meeting'),
+      ];
+      if ($display_mode === 'blank') {
+        $link['#attributes']['target'] = '_blank';
+      }
+      $links['#items'][] = $link;
+    }
+  return $links;
+}
diff --git a/modules/bbb_node/bbb_node.routing.yml b/modules/bbb_node/bbb_node.routing.yml
index 187c4fe..e1acc19 100644
--- a/modules/bbb_node/bbb_node.routing.yml
+++ b/modules/bbb_node/bbb_node.routing.yml
@@ -34,7 +34,7 @@ entity.bbb_node_type.delete_form:
   requirements:
     _permission: 'administer big blue button'
 bbb_node.meeting.attend:
-  path: '/node/{node}/meeting/attend'
+  path: '/node/{node}/meeting/attend/{record}'
   defaults:
     _controller: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::attend'
     _title_callback: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::getTitle'
@@ -45,7 +45,7 @@ bbb_node.meeting.attend:
     _entity_access: 'node.view'
     node: \d+
 bbb_node.meeting.moderate:
-  path: '/node/{node}/meeting/moderate'
+  path: '/node/{node}/meeting/moderate/{record}'
   defaults:
     _controller: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::moderate'
     _title_callback: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::getTitle'
@@ -55,17 +55,17 @@ bbb_node.meeting.moderate:
     _bbb_meeting_moderator_access_check: 'TRUE'
     _entity_access: 'node.view'
     node: \d+
-bbb_node.meeting.redirect:
-  path: '/node/{node}/redirect/{mode}'
-  defaults:
-    _controller: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::attendRedirect'
-  options:
-    _access_mode: 'ALL'
-  requirements:
-    _bbb_meeting_moderator_access_check: 'TRUE'
-    _entity_access: 'node.view'
-    node: \d+
-    mode: \s+
+#bbb_node.meeting.redirect:
+#  path: '/node/{node}/redirect/{mode}'
+#  defaults:
+#    _controller: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::attendRedirect'
+#  options:
+#    _access_mode: 'ALL'
+#  requirements:
+#    _bbb_meeting_moderator_access_check: 'TRUE'
+#    _entity_access: 'node.view'
+#    node: \d+
+#    mode: \s+
 bbb_node.meeting.end_meeting_confirm_form:
   path: '/meeting/end-confirm/{node}'
   defaults:
@@ -86,3 +86,13 @@ bbb_node.meeting.end_status:
     _bbb_meeting_attendee_access_check: 'TRUE'
     _entity_access: 'node.view'
     node: \d+
+bbb_node.meeting.closed:
+  path: '/node/{node}/meeting/closed'
+  defaults:
+    _controller: '\Drupal\bbb_node\Controller\BBBMeetingTypeController::closed'
+  options:
+    _access_mode: 'ALL'
+  requirements:
+    _bbb_meeting_attendee_access_check: 'TRUE'
+    _entity_access: 'node.view'
+    node: \d+
diff --git a/modules/bbb_node/css/details.css b/modules/bbb_node/css/details.css
new file mode 100644
index 0000000..fbba47a
--- /dev/null
+++ b/modules/bbb_node/css/details.css
@@ -0,0 +1,23 @@
+.meeting_details {
+  padding-top: 20px;
+  padding-bottom: 20px;
+}
+.meeting_details .status {
+  padding-left: 40px;
+}
+
+.status .open.open,
+.status .closed.closed {
+  display: block;
+}
+
+.status .open.closed,
+.status .closed.open {
+  display: none;
+}
+
+.bbb_records .description {
+  display: block;
+  font-size: 14px;
+  font-style: italic;
+}
diff --git a/modules/bbb_node/js/check_status.bbb.js b/modules/bbb_node/js/check_status.bbb.js
index c88df8d..502a482 100644
--- a/modules/bbb_node/js/check_status.bbb.js
+++ b/modules/bbb_node/js/check_status.bbb.js
@@ -6,9 +6,11 @@
           if (data.running === true) {
             location.reload();
           }
-        }).fail(
-          clearInterval(drupalSettings.bbb.check_status.interval)
-        );
+        }).fail(function( jqxhr, textStatus, error ) {
+          var err = textStatus + ", " + error;
+          console.log( "Request Failed: " + err );
+          clearInterval(drupalSettings.bbb.check_status.interval);
+        });
       }, 5000);
     }
   };
diff --git a/modules/bbb_node/js/reload_node.js b/modules/bbb_node/js/reload_node.js
new file mode 100644
index 0000000..9718ff2
--- /dev/null
+++ b/modules/bbb_node/js/reload_node.js
@@ -0,0 +1,9 @@
+(function ($, Drupal, drupalSettings) {
+  Drupal.behaviors.bbbCheckStatusInit = {
+    attach: function (context, settings) {
+      window.parent.location.href = drupalSettings.bbb.reload.url;
+    }
+  };
+})(jQuery, Drupal, drupalSettings);
+
+
diff --git a/modules/bbb_node/src/Access/BBBMeetingAttendeeAccessCheck.php b/modules/bbb_node/src/Access/BBBMeetingAttendeeAccessCheck.php
index c9a91d9..ecb9073 100644
--- a/modules/bbb_node/src/Access/BBBMeetingAttendeeAccessCheck.php
+++ b/modules/bbb_node/src/Access/BBBMeetingAttendeeAccessCheck.php
@@ -53,7 +53,7 @@ class BBBMeetingAttendeeAccessCheck implements AccessInterface {
     if (!$node instanceof NodeInterface) {
       $node = $this->nodeStorage->load($node);
     }
-    if ($this->nodeMeeting->isTypeOf($node)) {
+    if (!$this->nodeMeeting->isTypeOf($node)) {
       return AccessResult::forbidden();
     }
 
diff --git a/modules/bbb_node/src/Controller/BBBMeetingTypeController.php b/modules/bbb_node/src/Controller/BBBMeetingTypeController.php
index d85ca84..44ebd2f 100644
--- a/modules/bbb_node/src/Controller/BBBMeetingTypeController.php
+++ b/modules/bbb_node/src/Controller/BBBMeetingTypeController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bbb_node\Controller;
 
+use BigBlueButton\Parameters\GetMeetingInfoParameters;
 use Drupal\bbb\Service\Api;
 use Drupal\bbb_node\Service\NodeMeeting;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -14,6 +15,7 @@ use Drupal\Core\Url;
 use Drupal\node\NodeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
+use \Drupal\Core\Routing\TrustedRedirectResponse;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
@@ -111,49 +113,47 @@ class BBBMeetingTypeController extends ControllerBase {
       ->load($node_type);
     $mode = 'attend';
     $meeting = $this->nodeMeeting->get($node);
-    $params = [
-      'meetingID' => $meeting->meetingID,
-      'password' => $meeting->attendeePW,
-    ];
 
-    $status = $this->api->getMeetingInfo($params);
+    $status = $this->api->getMeetingInfo(new GetMeetingInfoParameters($meeting['created']->getMeetingId(), $meeting['created']->getModeratorPassword()));
     if ($status && property_exists($status, 'hasBeenForciblyEnded') && $status->hasBeenForciblyEnded() == 'true') {
       $this->messenger->addWarning('The meeting has been terminated and is not available for attending.');
       return new RedirectResponse(Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE]));
     }
 
 //    drupal_set_title($node->getTitle());
-    if ($meeting->running) {
+    if ($status && property_exists($status, 'isRunning') && $status->isRunning()) {
       if ($this->getDisplayMode() === 'blank') {
-        $this->redirect($node, $mode);
+        $this->attendRedirect($node, $mode);
       }
     }
     else {
       if ($meeting_settings->get('moderatorRequired')) {
         $this->messenger->addStatus($this->t('You signed up for this meeting. Please stay on this page, you will be redirected immediately after the meeting has started.'));
         $render = $this->entityTypeManager->getViewBuilder('node')->view($node);
-        $render['#attached']['libraries'][] = 'bbb/check_status';
-        $render['#attached']['drupalSettings']['bbb']['check_status']['check_status_url'] = Url::fromRoute('bbb_node.meeting.end_status', ['node' => $node->id()]);
+        $render['#attached']['library'] = 'bbb_node/check_status';
+        $url = Url::fromRoute('bbb_node.meeting.end_status', ['node' => $node->id()]);
+        $render['#attached']['drupalSettings']['bbb']['check_status']['url'] = $url->toString();
         return $render;
       }
       else {
         if (empty($meeting->initialized)) {
-          if ($data = $this->nodeMeeting->create($node, $params)) {
+          if ($data = $this->nodeMeeting->create($node, $meeting['created'])) {
             // Update local data.
-            $this->nodeMeeting->update($node, array_merge((array) $meeting, (array) $data));
+            $this->nodeMeeting->update($node, $meeting['created']);
           }
         }
         if ($this->getDisplayMode() == 'blank') {
-          $this->redirect($node, $mode);
+          return $this->attendRedirect($node, $mode);
         }
       }
     }
     return [
       '#theme' => 'bbb_meeting',
-      '#meeting' => $meeting,
+      '#meeting' => $meeting['url'][$mode],
       '#mode' => $mode,
       '#height' => $this->getDisplayHeight(),
       '#width' => $this->getDisplayWidth(),
+      '#cache' => ['max-age' => 0,],
     ];
 
   }
@@ -167,21 +167,15 @@ class BBBMeetingTypeController extends ControllerBase {
    * @return \Symfony\Component\HttpFoundation\Response|array
    *   Drupal render array.
    */
-  public function moderate(NodeInterface $node) {
+  public function moderate(NodeInterface $node, $record = NULL) {
     if (is_numeric($node)) {
       /** @var \Drupal\node\NodeInterface $node */
       $node = $this->nodeStorage->load($node);
     }
     $mode = 'moderate';
     $meeting = $this->nodeMeeting->get($node);
-    $meeting_info = $meeting['info'];
-
-    $params = [
-      'meetingID' => $meeting->meetingID,
-      'password' => $meeting->moderatorPW,
-    ];
 
-    $status = $this->api->getMeetingInfo($params);
+    $status = $this->api->getMeetingInfo(new GetMeetingInfoParameters($meeting['created']->getMeetingId(), $meeting['created']->getModeratorPassword()));
     if ($status && property_exists($status, 'hasBeenForciblyEnded') && $status->hasBeenForciblyEnded() == 'true') {
       $this->messenger->addStatus('The meeting has been terminated and is not available for reopening.');
       return new RedirectResponse(Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE]));
@@ -189,21 +183,41 @@ class BBBMeetingTypeController extends ControllerBase {
 
 //    drupal_set_title($node->getTitle());
     // Implicitly create meeting.
+    $display_mode = $this->config('bbb_node.settings')->get('display_mode');
     if (empty($meeting->initialized)) {
-      if ($data = $this->nodeMeeting->create($node, (array) $params)) {
+      if ($meeting['created']->isRecorded() == TRUE) {
+        $meeting['created']->setAllowStartStopRecording(true);
+        if($record === 'norecord') {
+          $meeting['created']->setAutoStartRecording(false);
+        }
+      }
+      if ($display_mode === 'inline') {
+        $meeting['created']->setLogoutUrl(Url::fromRoute('bbb_node.meeting.closed', ['node' => $node->id()], ['absolute' => 'true'])
+          ->toString());
+      }
+      if ($data = $this->nodeMeeting->create($node, $meeting['created'])) {
         // Update local data.
-        $this->nodeMeeting->update($node, array_merge((array) $meeting, (array) $data));
+        $this->nodeMeeting->update($node, $meeting['created']);
       }
     }
+    else {
+      if ($display_mode === 'inline') {
+        $meeting['created']->setLogoutUrl(Url::fromRoute('bbb_node.meeting.closed', ['node' => $node->id()], ['absolute' => 'true'])
+          ->toString());
+        $this->nodeMeeting->update($node, $meeting['created']);
+      }
+
+    }
     if ($this->getDisplayMode() === 'blank') {
-      $this->attendRedirect($node, $mode);
+      return $this->attendRedirect($node, $mode);
     }
     return [
       '#theme' => 'bbb_meeting',
-      '#meeting' => $meeting,
+      '#meeting' => $meeting['url'][$mode],
       '#mode' => $mode,
       '#height' => $this->getDisplayHeight(),
       '#width' => $this->getDisplayWidth(),
+      '#cache' => ['max-age' => 0,],
     ];
 
   }
@@ -216,32 +230,65 @@ class BBBMeetingTypeController extends ControllerBase {
       /** @var \Drupal\node\NodeInterface $node */
       $node = $this->nodeStorage->load($node);
     }
-    $meeting = $this->nodeMeeting->get($node, NULL, FALSE);
-    if (empty($meeting->url[$mode])) {
+    $meeting = $this->nodeMeeting->get($node, NULL, false);
+    if (empty($meeting['url'][$mode])) {
       // Redirect not found.
       throw new NotFoundHttpException();
     }
     // Get redirect URL.
-    $url = parse_url($meeting->url[$mode]);
+    $url = parse_url($meeting['url'][$mode]);
     $fullurl = $url['scheme'] . '://' . $url['host'] . (isset($url['port']) ? ':' . $url['port'] : '') . $url['path'] . '?' . $url['query'];
-    return new RedirectResponse($fullurl, 301);
+    return new TrustedRedirectResponse($fullurl, 301);
   }
 
   /**
    * Return meeting status; Menu callback
    *
-   * @param $node
-   *   EntityInterface node
+   * @param \Drupal\Core\Entity\EntityInterface $node
+   *   A Drupal node Interface.
    *
    * @return JsonResponse with boolean 'running'
    */
-  public function status($node) {
+  public function status(NodeInterface $node) {
     if (is_numeric($node)) {
       /** @var \Drupal\node\NodeInterface $node */
       $node = $this->nodeStorage->load($node);
     }
     $meeting = $this->nodeMeeting->get($node);
-    return new JsonResponse(['running' => $meeting->running]);
+    $status = $this->api->getMeetingInfo(new GetMeetingInfoParameters($meeting['created']->getMeetingId(), $meeting['created']->getModeratorPassword()));
+    if ($status && property_exists($status, 'isRunning') && $status->isRunning()) {
+      return new JsonResponse(['running' => TRUE]);
+    }
+    else {
+      return new JsonResponse(['running' => FALSE]);
+    }
+  }
+
+  /**
+   * Redirect to node after lewviong conference on display mode = inline.
+   */
+  public function closed(NodeInterface $node) {
+    if (is_numeric($node)) {
+      /** @var \Drupal\node\NodeInterface $node */
+      $node = $this->nodeStorage->load($node);
+    }
+    $options = ['absolute' => TRUE];
+    $url_object = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options);
+    $build = [
+      '#markup' => t('Please wait a second ...'),
+      '#attached' => [
+        'library' => 'bbb_node/reload_node',
+        'drupalSettings' => [
+          'bbb' => [
+            'reload' => [
+              'url' => $url_object->toString(),
+            ],
+          ],
+        ],
+      ],
+      '#cache' => ['max-age' => 0,],
+    ];
+    return $build;
   }
 
   public function getTitle(NodeInterface $node) {
diff --git a/modules/bbb_node/src/Plugin/Block/BBBLoginMeeting.php b/modules/bbb_node/src/Plugin/Block/BBBLoginMeeting.php
index 83839e3..3c3ad94 100644
--- a/modules/bbb_node/src/Plugin/Block/BBBLoginMeeting.php
+++ b/modules/bbb_node/src/Plugin/Block/BBBLoginMeeting.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bbb_node\Plugin\Block;
 
+use BigBlueButton\Parameters\GetMeetingInfoParameters;
+use Drupal\bbb\Service\Api;
 use Drupal\bbb_node\Service\NodeMeeting;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
@@ -10,6 +12,7 @@ use Drupal\Core\Routing\ResettableStackedRouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
+
 /**
  * Provides a "BBB Meeting details" block.
  *
@@ -55,7 +58,8 @@ class BBBLoginMeeting extends BlockBase implements ContainerFactoryPluginInterfa
       $plugin_id,
       $plugin_definition,
       $container->get('current_route_match'),
-      $container->get('bbb_node.meeting')
+      $container->get('bbb_node.meeting'),
+      $container->get('bbb.api')
     );
   }
 
@@ -73,10 +77,11 @@ class BBBLoginMeeting extends BlockBase implements ContainerFactoryPluginInterfa
    * @param \Drupal\bbb_node\Service\NodeMeeting $node_meeting
    *   Node based Meetings API.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, ResettableStackedRouteMatchInterface $route_match, NodeMeeting $node_meeting) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ResettableStackedRouteMatchInterface $route_match, NodeMeeting $node_meeting, Api $api) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->routeMatch = $route_match;
     $this->nodeMeeting = $node_meeting;
+    $this->api = $api;
   }
 
   /**
@@ -84,21 +89,41 @@ class BBBLoginMeeting extends BlockBase implements ContainerFactoryPluginInterfa
    */
   protected function blockAccess(AccountInterface $account) {
     $node = $this->routeMatch->getParameter('node');
-    if (!($node && $this->nodeMeeting->isTypeOf($node))) {
+    if ($node == null) {
+      return AccessResult::forbidden();
+    }
+    $meeting = $this->nodeMeeting->get($node);
+    if (!($node && $this->nodeMeeting->isTypeOf($node)) || count($meeting) == 0) {
       return AccessResult::forbidden();
     }
     return parent::blockAccess($account);
   }
 
+  protected function status($node) {
+    $meeting = $this->nodeMeeting->get($node);
+    if (count($meeting) == 0){
+      return null;
+    }
+    $status = $this->api->getMeetingInfo(new GetMeetingInfoParameters($meeting['created']->getMeetingId(), $meeting['created']->getModeratorPassword()));
+    if ($status && property_exists($status, 'isRunning') && $status->isRunning()) {
+      return 'open';
+    }
+    else {
+      return 'closed';
+    }
+  }
   /**
    * Implements \Drupal\block\BlockBase::build().
    */
   public function build() {
+    $node = $this->routeMatch->getParameter('node');
     return [
-      '#theme' => 'bbb_meeting',
-      '#meeting' => $this->nodeMeeting->get(
-        $this->routeMatch->getParameter('node')
-      ),
+      '#theme' => 'bbb_meeting_status',
+      '#meeting' => _bbb_node_get_links($node),
+      '#status' => $this->status($node),
+      '#cache' => ['max-age' => 0,],
+      '#attributes' => ['id' => 'meeting_status', 'class' => 'meeting_status'],
+      '#allowed_tags' => ['span'],
     ];
   }
 
diff --git a/modules/bbb_node/src/Plugin/Block/BBBRecordMeeting.php b/modules/bbb_node/src/Plugin/Block/BBBRecordMeeting.php
new file mode 100644
index 0000000..db984dc
--- /dev/null
+++ b/modules/bbb_node/src/Plugin/Block/BBBRecordMeeting.php
@@ -0,0 +1,168 @@
+<?php
+
+namespace Drupal\bbb_node\Plugin\Block;
+
+use BigBlueButton\Parameters\GetRecordingsParameters;
+use Drupal\bbb\Service\Api;
+use Drupal\bbb_node\Service\NodeMeeting;
+use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Routing\ResettableStackedRouteMatchInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Url;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+
+/**
+ * Provides a "BBB Meeting recorde´s" block.
+ *
+ * @Block(
+ *   id = "bbb_node_record_meeting",
+ *   admin_label = @Translation("BBB Meeting records")
+ * )
+ */
+class BBBRecordMeeting extends BlockBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * Current route match.
+   *
+   * @var \Drupal\Core\Routing\ResettableStackedRouteMatchInterface
+   */
+  protected $routeMatch;
+
+  /**
+   * Node based Meeting API.
+   *
+   * @var \Drupal\bbb_node\Service\NodeMeeting
+   */
+  protected $nodeMeeting;
+
+  /**
+   * Api wrapper.
+   *
+   * @var \Drupal\bbb\Service\Api
+   */
+  protected $api;
+
+  /**
+   * Creates an instance of the plugin.
+   *
+   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   *   The container to pull out services used in the plugin.
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin ID for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   *
+   * @return static
+   *   Returns an instance of this plugin.
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('current_route_match'),
+      $container->get('bbb_node.meeting'),
+      $container->get('bbb.api')
+    );
+  }
+
+  /**
+   * BBBLoginMeeting constructor.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $route_match
+   *   Current route match service.
+   * @param \Drupal\bbb_node\Service\NodeMeeting $node_meeting
+   *   Node based Meetings API.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ResettableStackedRouteMatchInterface $route_match, NodeMeeting $node_meeting, Api $api) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->routeMatch = $route_match;
+    $this->nodeMeeting = $node_meeting;
+    $this->api = $api;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function blockAccess(AccountInterface $account) {
+    $node = $this->routeMatch->getParameter('node');
+    if ($node == null) {
+      return AccessResult::forbidden();
+    }
+    $records = $this->get_records($node);
+    $count = count($records['#items']);
+    if (!($node && $this->nodeMeeting->isTypeOf($node)) || $count == 0) {
+      return AccessResult::forbidden();
+    }
+    return parent::blockAccess($account);
+  }
+
+  protected function get_records($node) {
+    $meeting = $this->nodeMeeting->get($node);
+    if (count($meeting) == 0){
+      return ['#items' => []];
+    }
+    $recording_parameters = new GetRecordingsParameters();
+    $recording_parameters->setMeetingId($meeting['created']->getMeetingId());
+    $recording = $this->api->getRecordings($recording_parameters);
+    $links = [
+      '#theme' => 'item_list__rec',
+      '#list_type' => 'ul',
+      '#items' => [],
+      '#attributes' => ['class' => 'bbb_records'],
+      '#wrapper_attributes' => ['class' => 'container'],
+      '#cache' => ['max-age' => 0,],
+    ];
+    $timezone = drupal_get_user_timezone();
+    foreach ($recording as $key => $record) {
+      $start = $recording[$key]->getStartTime();
+      $end = $recording[$key]->getEndTime();
+      $name = $recording[$key]->getName();
+      $playbackurl = $recording[$key]->getPlaybackUrl();
+      $recordID = $recording[$key]->getRecordId();
+      $url = Url::fromUri($playbackurl);
+      $formatted_date = \Drupal::service('date.formatter')->format($start/1000, 'short');
+      $min = ($end -$start) / 60000;
+      if ($min >= 1) {
+        $duration = (int) $min . t( ' min.');
+      }
+      else {
+        $duration = (int) ($min * 60) . t(' sec.');
+      }
+      $link = [
+        '#type' => 'link',
+        '#url' => $url,
+        '#title' => $name,
+        '#description' => $formatted_date . " " . $duration
+      ];
+      $link['#attributes']['target'] = '_blank';
+      $links['#items'][] = $link ;//. ": " . $formatted_date . " " . $duration;
+    }
+    return $links;
+  }
+
+  /**
+   * Implements \Drupal\block\BlockBase::build().
+   */
+  public function build() {
+    $node = $this->routeMatch->getParameter('node');
+    $records = $this->get_records($node);
+    return [
+      '#theme' => 'bbb_meeting_record',
+      '#records' => $records,
+      '#cache' => ['max-age' => 0,],
+    ];
+  }
+
+}
diff --git a/modules/bbb_node/src/Service/NodeMeeting.php b/modules/bbb_node/src/Service/NodeMeeting.php
index a4e3753..85f5be2 100644
--- a/modules/bbb_node/src/Service/NodeMeeting.php
+++ b/modules/bbb_node/src/Service/NodeMeeting.php
@@ -204,7 +204,7 @@ class NodeMeeting {
   /**
    * Store meeting.
    */
-  public function store($node, \BigBlueButton\Core\Meeting $params = NULL) {
+  public function store($node, CreateMeetingParameters $params = NULL) {
     return $this->update($node, $params);
   }
 
diff --git a/modules/bbb_node/templates/bbb-meeting-record.html.twig b/modules/bbb_node/templates/bbb-meeting-record.html.twig
index 0c330e4..de1fdb5 100644
--- a/modules/bbb_node/templates/bbb-meeting-record.html.twig
+++ b/modules/bbb_node/templates/bbb-meeting-record.html.twig
@@ -1,2 +1,7 @@
-<p><a href="{{ meeting.url.attend }}" target="_blank">{{ "Attend record"|t }}</a></p>
-<a href="{{ meeting.url.moderate }}" target="_blank">{{ "Moderate record"|t }}</a>
+{{ attach_library('bbb_node/details')}}
+
+<div class="meeting_details">
+  <div class="links">
+    {{ records }}
+  </div>
+</div>
diff --git a/modules/bbb_node/templates/bbb-meeting-status.html.twig b/modules/bbb_node/templates/bbb-meeting-status.html.twig
index 6397646..8bcda1f 100644
--- a/modules/bbb_node/templates/bbb-meeting-status.html.twig
+++ b/modules/bbb_node/templates/bbb-meeting-status.html.twig
@@ -1,2 +1,11 @@
-<p><a href="{{ meeting.url.attend }}" target="_blank">{{ "Attend"|t }}</a></p>
-<a href="{{ meeting.url.moderate }}" target="_blank">{{ "Moderate"|t }}</a>
+{{ attach_library('bbb_node/details')}}
+
+<div class="meeting_details">
+  <div class="links">
+    {{ meeting }}
+  </div>
+  <div class="status">
+    <span id="open" class="open {{ status }}">{{ 'Meeting is open'|t }}</span>
+    <span id="closed" class="closed {{ status }}">{{ 'Meeting is closed'|t }}</span>
+  </div>
+</div>
diff --git a/modules/bbb_node/templates/bbb-meeting.html.twig b/modules/bbb_node/templates/bbb-meeting.html.twig
index 931aef3..39a39af 100644
--- a/modules/bbb_node/templates/bbb-meeting.html.twig
+++ b/modules/bbb_node/templates/bbb-meeting.html.twig
@@ -9,9 +9,12 @@
 *   iframe tag.
 */
 #}
-<iframe {{ attributes }}>
+
+
+<iframe width="100%" style="max-height: 650px; height: calc(100vh * 0.70);" src="{{ meeting }}"
+        frameborder="0" allowfullscreen allow="camera; microphone;">
   {% trans %}
     Your browser does not support iframes, but you can use the following link:
-    <a href="{{ src }}">Link</a>
+    <a href="{{ meeting }}">Link</a>
   {% endtrans %}
 </iframe>
diff --git a/modules/bbb_node/templates/html--node--meeting--closed.html.twig b/modules/bbb_node/templates/html--node--meeting--closed.html.twig
new file mode 100644
index 0000000..ca9c32a
--- /dev/null
+++ b/modules/bbb_node/templates/html--node--meeting--closed.html.twig
@@ -0,0 +1,54 @@
+{#
+/**
+ * @file
+ * Theme override for the basic structure of a single Drupal page.
+ *
+ * Variables:
+ * - logged_in: A flag indicating if user is logged in.
+ * - root_path: The root path of the current page (e.g., node, admin, user).
+ * - node_type: The content type for the current node, if the page is a node.
+ * - head_title: List of text elements that make up the head_title variable.
+ *   May contain one or more of the following:
+ *   - title: The title of the page.
+ *   - name: The name of the site.
+ *   - slogan: The slogan of the site.
+ * - page_top: Initial rendered markup. This should be printed before 'page'.
+ * - page: The rendered page markup.
+ * - page_bottom: Closing rendered markup. This variable should be printed after
+ *   'page'.
+ * - db_offline: A flag indicating if the database is offline.
+ * - placeholder_token: The token for generating head, css, js and js-bottom
+ *   placeholders.
+ *
+ * @see template_preprocess_html()
+ */
+#}
+{%
+  set body_classes = [
+    logged_in ? 'user-logged-in',
+    not root_path ? 'path-frontpage' : 'path-' ~ root_path|clean_class,
+    node_type ? 'page-node-type-' ~ node_type|clean_class,
+    db_offline ? 'db-offline',
+  ]
+%}
+<!DOCTYPE html>
+<html{{ html_attributes }}>
+  <head>
+    <head-placeholder token="{{ placeholder_token }}">
+    <title>{{ head_title|safe_join(' | ') }}</title>
+    <css-placeholder token="{{ placeholder_token }}">
+    <js-placeholder token="{{ placeholder_token }}">
+  </head>
+  <body{{ attributes.addClass(body_classes) }}>
+    {#
+      Keyboard navigation/accessibility link to main content section in
+      page.html.twig.
+    #}
+    <a href="#main-content" class="visually-hidden focusable skip-link">
+      {{ 'Skip to main content'|t }}
+    </a>
+
+    {{ page }}
+    <js-bottom-placeholder token="{{ placeholder_token }}">
+  </body>
+</html>
diff --git a/modules/bbb_node/templates/item-list--rec.html.twig b/modules/bbb_node/templates/item-list--rec.html.twig
new file mode 100644
index 0000000..849d7f6
--- /dev/null
+++ b/modules/bbb_node/templates/item-list--rec.html.twig
@@ -0,0 +1,42 @@
+{#
+/**
+ * @file
+ * Default theme implementation for an item list.
+ *
+ * Available variables:
+ * - items: A list of items. Each item contains:
+ *   - attributes: HTML attributes to be applied to each list item.
+ *   - value: The content of the list element.
+ * - title: The title of the list.
+ * - list_type: The tag for list element ("ul" or "ol").
+ * - wrapper_attributes: HTML attributes to be applied to the list wrapper.
+ * - attributes: HTML attributes to be applied to the list.
+ * - empty: A message to display when there are no items. Allowed value is a
+ *   string or render array.
+ * - context: A list of contextual data associated with the list. May contain:
+ *   - list_style: The custom list style.
+ *
+ * @see template_preprocess_item_list()
+ *
+ * @ingroup themeable
+ */
+#}
+{% if context.list_style %}
+  {%- set attributes = attributes.addClass('item-list__' ~ context.list_style) %}
+{% endif %}
+{% if items or empty %}
+  {%- if title is not empty -%}
+    <h3>{{ title }}</h3>
+  {%- endif -%}
+
+  {%- if items -%}
+    <{{ list_type }}{{ attributes }}>
+      {%- for item in items -%}
+        <li{{ item.attributes }}>{{ item.value }}
+          <span class="description">{{ item.value['#description'] }}</span></li>
+      {%- endfor -%}
+    </{{ list_type }}>
+  {%- else -%}
+    {{- empty -}}
+  {%- endif -%}
+{%- endif %}
diff --git a/modules/bbb_node/templates/page--node--meeting--closed.html.twig b/modules/bbb_node/templates/page--node--meeting--closed.html.twig
new file mode 100644
index 0000000..2805ef1
--- /dev/null
+++ b/modules/bbb_node/templates/page--node--meeting--closed.html.twig
@@ -0,0 +1,56 @@
+{#
+/**
+ * @file
+ * Theme override to display a single page.
+ *
+ * The doctype, html, head and body tags are not in this template. Instead they
+ * can be found in the html.html.twig template in this directory.
+ *
+ * Available variables:
+ *
+ * General utility variables:
+ * - base_path: The base URL path of the Drupal installation. Will usually be
+ *   "/" unless you have installed Drupal in a sub-directory.
+ * - is_front: A flag indicating if the current page is the front page.
+ * - logged_in: A flag indicating if the user is registered and signed in.
+ * - is_admin: A flag indicating if the user has permission to access
+ *   administration pages.
+ *
+ * Site identity:
+ * - front_page: The URL of the front page. Use this instead of base_path when
+ *   linking to the front page. This includes the language domain or prefix.
+ *
+ * Page content (in order of occurrence in the default page.html.twig):
+ * - node: Fully loaded node, if there is an automatically-loaded node
+ *   associated with the page and the node ID is the second argument in the
+ *   page's path (e.g. node/12345 and node/12345/revisions, but not
+ *   comment/reply/12345).
+ *
+ * Regions:
+ * - page.header: Items for the header region.
+ * - page.primary_menu: Items for the primary menu region.
+ * - page.secondary_menu: Items for the secondary menu region.
+ * - page.highlighted: Items for the highlighted content region.
+ * - page.help: Dynamic help text, mostly for admin pages.
+ * - page.content: The main content of the current page.
+ * - page.sidebar_first: Items for the first sidebar.
+ * - page.sidebar_second: Items for the second sidebar.
+ * - page.footer: Items for the footer region.
+ * - page.breadcrumb: Items for the breadcrumb region.
+ *
+ * @see template_preprocess_page()
+ * @see html.html.twig
+ */
+#}
+<div class="layout-container">
+
+  <main role="main">
+    <a id="main-content" tabindex="-1"></a>{# link is in html.html.twig #}
+
+    <div class="layout-content">
+      {{ page.content }}
+    </div>{# /.layout-content #}
+
+  </main>
+
+</div>{# /.layout-container #}
diff --git a/src/Service/Api.php b/src/Service/Api.php
index dcf4560..7078e34 100644
--- a/src/Service/Api.php
+++ b/src/Service/Api.php
@@ -7,7 +7,7 @@ use BigBlueButton\Parameters\EndMeetingParameters;
 use BigBlueButton\Parameters\GetMeetingInfoParameters;
 use BigBlueButton\Parameters\IsMeetingRunningParameters;
 use BigBlueButton\Parameters\JoinMeetingParameters;
-
+use BigBlueButton\Parameters\GetRecordingsParameters;
 /**
  * Class Api.
  *
@@ -245,5 +245,13 @@ class Api {
   public function end($key) {
 
   }
-
+  public function getRecordings(GetRecordingsParameters $params) {
+    $response = $this->bbb->getRecordings($params);
+    if ($response->getReturnCode() === self::SUCCESS) {
+      return $response->getRecords();
+    }
+    else {
+      return FALSE;
+    }
+  }
 }
diff --git a/src/Service/Meeting.php b/src/Service/Meeting.php
index e26f335..5d4d93d 100644
--- a/src/Service/Meeting.php
+++ b/src/Service/Meeting.php
@@ -129,21 +129,23 @@ class Meeting implements MeetingInterface {
       $meeting_created = $this->meetingCollection->get($id);
       if ($meeting_created) {
         $meeting_info = $this->api->getMeetingInfo(new GetMeetingInfoParameters($meeting_created->getMeetingId(), $meeting_created->getModeratorPassword()));
+        $attend = new JoinMeetingParameters(
+          $meeting_created->getMeetingId(),
+          $account->getDisplayName(),
+          $meeting_created->getAttendeePassword()
+        );
+        $attend->setJoinViaHtml5(true);
+        $attend->setRedirect(TRUE);
+        $moderate = new JoinMeetingParameters(
+          $meeting_created->getMeetingId(),
+          $account->getDisplayName(),
+          $meeting_created->getModeratorPassword()
+        );
+        $moderate->setJoinViaHtml5(true);
+        $moderate->setRedirect(TRUE);
         $url = [
-          'attend' => $this->api->joinMeeting(
-            new JoinMeetingParameters(
-              $meeting_created->getMeetingId(),
-              $account->getDisplayName(),
-              $meeting_created->getAttendeePassword()
-            )
-          ),
-          'moderate' => $this->api->joinMeeting(
-            new JoinMeetingParameters(
-              $meeting_created->getMeetingId(),
-              $account->getDisplayName(),
-              $meeting_created->getModeratorPassword()
-            )
-          ),
+          'attend' => $this->api->joinMeeting($attend),
+          'moderate' => $this->api->joinMeeting($moderate),
         ];
         $meeting = [
           'info' => $meeting_info,
@@ -197,8 +199,8 @@ class Meeting implements MeetingInterface {
     }
     $meeting = $this->get($key);
     $params = new EndMeetingParameters(
-      $meeting->meetingID,
-      $meeting->moderatorPW
+      $meeting['created']->getMeetingId(),
+      $meeting['created']->getModeratorPassword()
     );
     $request = $this->api->endMeeting($params);
     return $request;
