<?php

/**
 * @file
 * Big Blue Button - Enables universities and colleges to deliver a high-quality
 * learning experience.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 *
 * TODO:
 * - Add 'start meeting' button
 * - Rework waiting page
 *   - do a seperate page with a big throbber, that tells the status of the
 *     meeeting, so that it's clear you have to wait here.
 *   - Incorporate a Flash Player check, explain it and use the waiting time
 *     to adjust the audio/video settings
 */

// API version
use BigBlueButton\Parameters\CreateMeetingParameters;
use BigBlueButton\Parameters\IsMeetingRunningParameters;
use BigBlueButton\Parameters\JoinMeetingParameters;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;



//
///* Drupal Hooks */
//
///**
// * Implements hook_views_api().
// */
//function bbb_views_api() {
//  return array(
//    'api' => 2,
//    'path' => drupal_get_path('module', 'bbb') . '/includes',
//  );
//}

/**
 * Implement HOOK_menu().
 */
function bbb_menu() {
  $items = [];
  $show_local_tasks = \Drupal::config('bbb.settings')->get('local_tasks');
  $items['node/%node/meeting/attend'] = [
    'title' => 'Attend Meeting',
    'route_name' => 'bbb.meeting.attend',
    'type' => $show_local_tasks ? MENU_LOCAL_TASK : MENU_CALLBACK,
    'weight' => 2,
  ];
  $items['node/%node/meeting/moderate'] = [
    'title' => 'Moderate Meeting',
    'route_name' => 'bbb.meeting.moderate',
    'type' => $show_local_tasks ? MENU_LOCAL_TASK : MENU_CALLBACK,
    'weight' => 2,
  ];
  $items['node/%node/meeting/end-confirm'] = [
    'title' => 'Terminate Meeting',
    'type' => MENU_CALLBACK,
  ];
  $items['node/%node/redirect/attend'] = [
    'type' => MENU_CALLBACK,
  ];
  $items['node/%node/redirect/moderate'] = [
    'type' => MENU_CALLBACK,
  ];
  $items['node/%node/meeting/status'] = [
    'type' => MENU_CALLBACK,
    //'file' => 'includes/api.bbb.inc',
  ];

  return $items;
}

/**
 * Implements hook_node_access().
 */
function bbb_node_access(NodeInterface $node, $op, AccountInterface $account) {
  /** @var \Drupal\bbb\Service\NodeMeeting $node_meeting */
  $node_meeting = \Drupal::service('bbb.node_meeting');
  if (in_array($op, ['create', 'update']) && $node_meeting->isTypeOf($node)) {
    // No bother to check for node access since this will be on edit/create pages.
    if ($account->hasPermission('record meetings') || $account->hasPermission('administer big blue button')) {
      return AccessResult::allowed();
    }
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function bbb_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Node type settings form
  switch ($form_id) {
    case 'node_type_edit_form':
    case 'node_type_add_form':
      $manager = \Drupal::entityTypeManager();
      if ($form_id == 'node_type_edit_form') {
        /** @var \Drupal\node\NodeTypeInterface $node_type */
        $node_type = $form_state->getFormObject()->getEntity();
        $id = $node_type->id();
        $label = $node_type->label();
        $entity = entity_load('bbb_node_type', $id);
        if (!$entity) {
          $entity = entity_create('bbb_node_type', [
            'id' => $id,
            'label' => $label,
          ]);
        }
      }
      else {
        $entity = entity_create('bbb_node_type', []);
      }
      $bbb_form = $manager->getFormObject($entity->getEntityTypeId(), 'edit');
      $bbb_form->setEntity($entity);
      $form['bbb'] = $bbb_form->buildForm([], new FormState());
      if (!empty($form['bbb']['#submit'])) {
        $form['#submit'][] = array_pop($form['bbb']['#submit']);
      }
      if (!empty($form['actions']['submit']['#validate']) && !empty($form['bbb']['actions']['submit']['#validate'])) {
        $form['actions']['submit']['#validate'] = array_merge(  $form['actions']['submit']['#validate'], $form['bbb']['actions']['submit']['#validate']);
      }
      if (!empty($form['actions']['submit']['#submit']) && !empty($form['bbb']['actions']['submit']['#submit'])) {
        $form['actions']['submit']['#submit'] = array_merge($form['actions']['submit']['#submit'], $form['bbb']['actions']['submit']['#submit']);
        $form['actions']['submit']['#submit'][] = [$bbb_form, 'saveEntity'];
      }
      $form['bbb']['actions']['#access'] = FALSE;
      break;

    default:
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bbb_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\bbb\Service\NodeMeeting $node_meeting */
  $node_meeting = \Drupal::service('bbb.node_meeting');
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if ($node_meeting->isTypeOf($node)) {
    if ($node->id()) {
      $meeting = $node_meeting->get($node);
      /** @var \BigBlueButton\Parameters\CreateMeetingParameters $meeting_info */
      $meeting_info = $meeting['info'];
    }
    else {
      $meeting_info = $node_meeting->init($node);
    }
    $form['bbb'] = [];
    $record = [
      '#title' => t('Record meeting'),
      '#type' => 'select',
      '#default_value' => $meeting_info->isRecorded() ,
      '#options' => [
        0 => t('Do not record'),
        1 => t('Record'),
      ],
      '#weight' => -1,
    ];
    if (\Drupal::currentUser()->hasPermission('administer big blue button')) {
      $form['bbb']['welcome'] = [
        '#title' => t('Welcome message'),
        '#type' => 'textfield',
        '#default_value' => $meeting_info->getWelcomeMessage(),
        '#maxlength' => 255,
        '#description' => t('A welcome message that gets displayed on the chat window when the participant joins. You can include keywords (%%CONFNAME%%, %%DIALNUM%%, %%CONFNUM%%) which will be substituted automatically.'),
      ];
      $form['bbb']['dialNumber'] = [
        '#title' => t('Dial number'),
        '#type' => 'textfield',
        '#default_value' => $meeting_info->getDialNumber(),
        '#maxlength' => 32,
        '#description' => t('The dial access number that participants can call in using regular phone.'),
      ];
      $form['bbb']['moderatorPW'] = [
        '#title' => t('Moderator password'),
        '#type' => 'textfield',
        '#default_value' => $meeting_info->getModeratorPassword(),
        '#maxlength' => 32,
        '#description' => t('The password that will be required for moderators to join the meeting or for certain administrative actions (i.e. ending a meeting).'),
      ];
      $form['bbb']['attendeePW'] = [
        '#title' => t('Attendee password'),
        '#type' => 'textfield',
        '#default_value' => $meeting_info->getAttendeePassword(),
        '#maxlength' => 32,
        '#description' => t('The password that will be required for attendees to join the meeting.'),
      ];
      $form['bbb']['logoutURL'] = [
        '#title' => t('Logout URL'),
        '#type' => 'textfield',
        '#default_value' => $meeting_info->getLogoutUrl(),
        '#maxlength' => 255,
        '#description' => t('The URL that the Big Blue Button client will go to after users click the OK button on the <em>You have been logged out message</em>.'),
      ];
      $form['bbb']['record'] = $record;
    }
    if (\Drupal::currentUser()->hasPermission('record meetings') && empty($form['bbb']['record'])) {
      // this clause is for users who have the record meetings permission but no permissions to "administer BBB"
      $form['bbb']['record'] = $record;
    }
    // Add details block and show if any of form elements added.
    $form['bbb'] += [
      '#access' => !empty($form['bbb']),
      '#title' => t('Meeting settings'),
      '#type' => 'details',
      '#description' => t("The following settings may be changed until the meeting first starts."),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#group' => 'advanced',
      '#weight' => 100,
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 * @see hook_ENTITY_TYPE_insert()
 */
function bbb_node_insert(EntityInterface $node) {
  /** @var \Drupal\bbb\Service\NodeMeeting $node_meeting */
  $node_meeting = \Drupal::service('bbb.node_meeting');
  /** @var \Drupal\node\NodeInterface $node */
  if ($node_meeting->isTypeOf($node)) {
//    $meeting = $node_meeting->init($node);
    $node_meeting->store($node/*, $meeting*/);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function bbb_node_update(EntityInterface $node) {
  /** @var \Drupal\bbb\Service\NodeMeeting $meeting */
  $meeting = \Drupal::service('bbb.node_meeting');
  /** @var \Drupal\node\NodeInterface $node */
  if ($meeting->isTypeOf($node)) {
    $meeting->update($node, $node->bbb);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function bbb_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\bbb\Service\NodeMeeting $node_meeting */
  $node_meeting = \Drupal::service('bbb.node_meeting');
  /** @var \Drupal\node\NodeInterface $node */
  $node_type = $node->getType();
  if (!$node_meeting->isTypeOf($node)) {
    return;
  }

  $BBBNodeTypeConfig = \Drupal::entityTypeManager()->getStorage('bbb_node_type')->load($node->getType());
  // Show meeting status.
  if ($BBBNodeTypeConfig->get('showStatus')) {
    $meeting = $node_meeting->get($node);
    $build['content']['bbb_meeting_status'] = [
      '#theme' => 'bbb_meeting_status',
      '#meeting' => $meeting,
      '#weight' => 10,
    ];
    $build['content']['bbb_meeting_record'] = [
      '#theme' => 'bbb_meeting_record',
      '#meeting' => $meeting,
      '#weight' => 11,
    ];
  }

  // Add links to content.
  $links = [];
  $show = $BBBNodeTypeConfig->get('showLinks');
  if ($view_mode != 'teaser' && $show) {
    $meeting = $node_meeting->get($node);
    $current_user = \Drupal::currentUser();
    if ($current_user->hasPermission('attend meetings') || $current_user->hasPermission('administer big blue button')) {
      $links['meeting_attend'] = [
        'title' => t('Attend meeting'),
        'href' => 'node/' . $node->id() . '/meeting/attend',
      ];
    }
    if ((\Drupal::currentUser()->hasPermission('moderate meetings') || $current_user->hasPermission('administer big blue button')) ||
      $current_user->id() == $node->getAuthor()
        ->id() && $current_user->hasPermission('moderate own meetings')) {
      $links['meeting_moderate'] = [
        'title' => t('Moderate meeting'),
        'href' => 'node/' . $node->id() . '/meeting/moderate',
      ];
    }
    if (($current_user->hasPermission('moderate meetings') || $current_user->hasPermission('administer big blue button')) ||
      $current_user->id() == $node->getAuthor()
        ->id() && $current_user->hasPermission('moderate own meetings') &&
      $meeting->running) {
      $links['meeting_end'] = [
        'title' => t('Terminate meeting'),
        'href' => 'node/' . $node->id() . '/meeting/end-confirm',
      ];
    }
    if (!empty($links)) {
      $build['content']['links']['bbb'] = [
        '#links' => $links,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function bbb_node_load($entities) {
  /** @var \Drupal\bbb\Service\NodeMeeting $meeting */
  $meeting = \Drupal::service('bbb.node_meeting');
  /** @var NodeInterface[] $entities */
  foreach ($entities as $node) {
    if ($meeting->isTypeOf($node)) {
      $node->bbb = $meeting->get($node);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function bbb_node_delete(EntityInterface $entity) {
  /** @var \Drupal\bbb\Service\NodeMeeting $meeting */
  $meeting = \Drupal::service('bbb.node_meeting');
  /** @var \Drupal\node\NodeInterface $entity */
  if ($meeting->isTypeOf($entity)) {
    $meeting->delete($entity);
  }
}

/**
 * Implements hook_theme().
 */
function bbb_theme($existing, $type, $theme, $path) {
  return [
    'bbb_meeting' => [
      'variables' => ['meeting' => NULL, 'mode' => NULL, 'params' => []],
    ],
    'bbb_meeting_status' => [
      'variables' => ['meeting' => NULL],
    ],
    'bbb_meeting_record' => [
      'variables' => ['meeting' => NULL],
    ],
    'bbb_meeting_join_moderator' => [
      'variables' => ['meeting' => NULL],
    ],
    'bbb_meeting_join_attendee' => [
      'variables' => ['meeting' => NULL],
    ],
    'bbb_block_meeting' => [
      'variables' => ['meeting' => NULL],
    ],
  ];
}

/* Themeables */

/**
 * Theme inline meeting
 */
function theme_bbb_meeting($meeting) {
  /** @var \Drupal\bbb\Service\Theme $theme */
  $theme = \Drupal::service('bbb.theme');
  return $theme->meeting($meeting);
}

/**
 * Theme meeting status
 */
function theme_bbb_meeting_status($meeting) {
  /** @var \Drupal\bbb\Service\Theme $theme */
  $theme = \Drupal::service('bbb.theme');
  return $theme->meetingStatus($meeting);
}

/**
 * Theme meeting recording
 */
function theme_bbb_meeting_record($meeting) {
  /** @var \Drupal\bbb\Service\Theme $theme */
  $theme = \Drupal::service('bbb.theme');
  return $theme->meetingRecord($meeting);
}

/**
 * Theme meeting details block
 */
function theme_bbb_block_meeting($meeting) {
  /** @var \Drupal\bbb\Service\Theme $theme */
  $theme = \Drupal::service('bbb.theme');
  return $theme->blockMeeting($meeting);
}
